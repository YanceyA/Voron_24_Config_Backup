[gcode_macro PY_TEST]
variable_output: 118
gcode:
  !# Parse requested axes from params (supports AXES=XYZ or X=1 Y=1 Z=1)
  !# Note: bare tokens like 'PY_TEST X' are not valid; use X=1 or AXES=X
  !try:
  !  raw_lower = (rawparams or "").lower()
  !except NameError:
  !  raw_lower = ""
  !requested_axes = set()
  !axes_param = params.get("AXES")
  !if axes_param:
  !  for ch in str(axes_param).lower():
  !    if ch in ("x", "y", "z"):
  !      requested_axes.add(ch)
  !for letter in ("X", "Y", "Z"):
  !  if letter in params:
  !    requested_axes.add(letter.lower())
  !request_all = (not requested_axes)
  !if request_all:
  !  requested_axes = {"x", "y", "z"}
  !# Printer state (dict-style access in Python macros)
  !homed_axes_raw = (printer["toolhead"].get("homed_axes") or "")
  !homed_axes = set(homed_axes_raw.lower())
  !unhomed_axes = {"x", "y", "z"} - homed_axes
  !status_code = own_vars.output
  !# Debug: what did we parse? (kept concise)
  !respond_info(f"PY_TEST args='{raw_lower}' params={list(params.keys())} req={sorted(requested_axes)} unhomed={sorted(unhomed_axes)}")
  !# Act based on homing state
  !if not unhomed_axes:
  !  emit(f"M{status_code} All axes are homed")
  !elif request_all and unhomed_axes == {"x", "y", "z"}:
  !  emit(f"M{status_code} Homing all axes")
  !  emit("G28")
  !else:
  !  for axis in ("x", "y", "z"):
  !    if axis in unhomed_axes and axis in requested_axes:
  !      emit(f"M{status_code} Homing {axis.upper()} axis")
  !      emit(f"G28 {axis.upper()}")
